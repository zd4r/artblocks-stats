// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/api/usecase/interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/zd4r/artblocks-stats/internal/api/entity"
)

// MockHoldersRepo is a mock of HoldersRepo interface.
type MockHoldersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHoldersRepoMockRecorder
}

// MockHoldersRepoMockRecorder is the mock recorder for MockHoldersRepo.
type MockHoldersRepoMockRecorder struct {
	mock *MockHoldersRepo
}

// NewMockHoldersRepo creates a new mock instance.
func NewMockHoldersRepo(ctrl *gomock.Controller) *MockHoldersRepo {
	mock := &MockHoldersRepo{ctrl: ctrl}
	mock.recorder = &MockHoldersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHoldersRepo) EXPECT() *MockHoldersRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHoldersRepo) Get(arg0 entity.Holder) (entity.Holder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(entity.Holder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHoldersRepoMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHoldersRepo)(nil).Get), arg0)
}

// Insert mocks base method.
func (m *MockHoldersRepo) Insert(arg0 entity.Holder) (entity.Holder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(entity.Holder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockHoldersRepoMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockHoldersRepo)(nil).Insert), arg0)
}

// UpdateScores mocks base method.
func (m *MockHoldersRepo) UpdateScores(arg0 entity.Holder) (entity.Holder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScores", arg0)
	ret0, _ := ret[0].(entity.Holder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScores indicates an expected call of UpdateScores.
func (mr *MockHoldersRepoMockRecorder) UpdateScores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScores", reflect.TypeOf((*MockHoldersRepo)(nil).UpdateScores), arg0)
}

// MockCollectionWebAPI is a mock of CollectionWebAPI interface.
type MockCollectionWebAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionWebAPIMockRecorder
}

// MockCollectionWebAPIMockRecorder is the mock recorder for MockCollectionWebAPI.
type MockCollectionWebAPIMockRecorder struct {
	mock *MockCollectionWebAPI
}

// NewMockCollectionWebAPI creates a new mock instance.
func NewMockCollectionWebAPI(ctrl *gomock.Controller) *MockCollectionWebAPI {
	mock := &MockCollectionWebAPI{ctrl: ctrl}
	mock.recorder = &MockCollectionWebAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionWebAPI) EXPECT() *MockCollectionWebAPIMockRecorder {
	return m.recorder
}

// GetHolderScores mocks base method.
func (m *MockCollectionWebAPI) GetHolderScores(arg0 entity.Holder) (entity.Holder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHolderScores", arg0)
	ret0, _ := ret[0].(entity.Holder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHolderScores indicates an expected call of GetHolderScores.
func (mr *MockCollectionWebAPIMockRecorder) GetHolderScores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHolderScores", reflect.TypeOf((*MockCollectionWebAPI)(nil).GetHolderScores), arg0)
}

// GetHolders mocks base method.
func (m *MockCollectionWebAPI) GetHolders(arg0 entity.Collection) (entity.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHolders", arg0)
	ret0, _ := ret[0].(entity.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHolders indicates an expected call of GetHolders.
func (mr *MockCollectionWebAPIMockRecorder) GetHolders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHolders", reflect.TypeOf((*MockCollectionWebAPI)(nil).GetHolders), arg0)
}

// GetHoldersCount mocks base method.
func (m *MockCollectionWebAPI) GetHoldersCount(arg0 entity.Collection) (entity.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHoldersCount", arg0)
	ret0, _ := ret[0].(entity.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHoldersCount indicates an expected call of GetHoldersCount.
func (mr *MockCollectionWebAPIMockRecorder) GetHoldersCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHoldersCount", reflect.TypeOf((*MockCollectionWebAPI)(nil).GetHoldersCount), arg0)
}

// MockCollection is a mock of Collection interface.
type MockCollection struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionMockRecorder
}

// MockCollectionMockRecorder is the mock recorder for MockCollection.
type MockCollectionMockRecorder struct {
	mock *MockCollection
}

// NewMockCollection creates a new mock instance.
func NewMockCollection(ctrl *gomock.Controller) *MockCollection {
	mock := &MockCollection{ctrl: ctrl}
	mock.recorder = &MockCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollection) EXPECT() *MockCollectionMockRecorder {
	return m.recorder
}

// GatherHoldersScores mocks base method.
func (m *MockCollection) GatherHoldersScores(arg0 context.Context, arg1 entity.Collection) (entity.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatherHoldersScores", arg0, arg1)
	ret0, _ := ret[0].(entity.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GatherHoldersScores indicates an expected call of GatherHoldersScores.
func (mr *MockCollectionMockRecorder) GatherHoldersScores(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatherHoldersScores", reflect.TypeOf((*MockCollection)(nil).GatherHoldersScores), arg0, arg1)
}

// GetHolders mocks base method.
func (m *MockCollection) GetHolders(arg0 context.Context, arg1 entity.Collection) (entity.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHolders", arg0, arg1)
	ret0, _ := ret[0].(entity.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHolders indicates an expected call of GetHolders.
func (mr *MockCollectionMockRecorder) GetHolders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHolders", reflect.TypeOf((*MockCollection)(nil).GetHolders), arg0, arg1)
}

// СalculateStats mocks base method.
func (m *MockCollection) СalculateStats(arg0 context.Context, arg1 entity.Collection) (entity.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "СalculateStats", arg0, arg1)
	ret0, _ := ret[0].(entity.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// СalculateStats indicates an expected call of СalculateStats.
func (mr *MockCollectionMockRecorder) СalculateStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "СalculateStats", reflect.TypeOf((*MockCollection)(nil).СalculateStats), arg0, arg1)
}
